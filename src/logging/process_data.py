# generated by datamodel-codegen:
#   filename:  process-data-json-schema.json
#   timestamp: 2025-01-20T16:21:03+00:00

# This file is generated from the json schemas in:
# https://github.com/statisticsnorway/arkitektur-informasjonsmodeller/tree/main/process-data
# Generated by the pydantic tool datamodel-code-generator (pip install) and the command:
# poetry run datamodel-codegen  --output-model-type pydantic_v2.BaseModel --use-standard-collections --use-union-operator --input process-data-json-schema.json --output process_data.py
# And then added some minor modifications

from datetime import datetime
from enum import Enum
from typing import Any

from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import Field


class UnitIdItem(BaseModel):
    unit_id_variable: str | None = None
    unit_id_value: str | None = None


class ChangeEvent(Enum):
    A = "A"
    M = "M"
    MNC = "MNC"
    NOT = "NOT"


class ChangeEventReason(Enum):
    OTHER_SOURCE = "OTHER_SOURCE"
    REVIEW = "REVIEW"
    OWNER = "OWNER"
    MARGINAL_UNIT = "MARGINAL_UNIT"
    OTHER = "OTHER"


class DataChangeType(Enum):
    NEW = "NEW"
    UPD = "UPD"
    DEL = "DEL"


class OldValueItem(BaseModel):
    variable_name: str | None = None
    value: str | None = None


class NewValueItem(BaseModel):
    variable_name: str | None = None
    value: str | None = None


class ProcessData(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    statistics_name: str = Field(
        ..., description="Statistics shortname or statistics product name"
    )
    data_source: list[str] | None = Field(
        None,
        description="Reference or filepath to one or more input dataset (start data) used as data source before changing data (if applicable)",
    )
    data_target: str = Field(
        ...,
        description="Target dataset filepath (eg. GCS-path to a parquet file) or other dataset reference (eg. ref. to a CloudSQL database table).",
    )
    data_period: str = Field(
        ..., description="Data period for changed data - eg. year, date, date-time, ..."
    )
    unit_id: str | list[UnitIdItem] = Field(..., description="Unit identification.")
    variable_name: str | None = Field(
        None,
        description="The variable name (or elment-path) that contains data changes.",
    )
    change_event: ChangeEvent = Field(
        ...,
        description="How the event was triggered: Automatically changed (A), Manually changed (M), Manually approved with no change (MNC), Not reviewed (NOT)",
    )
    change_event_reason: ChangeEventReason | None = Field(
        None,
        description="Reason for change or approval: Other source (OTHER_SOURCE), Statistical review (REVIEW), Information from the data provider/registry owner (OWNER), Small/marginal unit (MARGINAL_UNIT), Other reason (OTHER)",
    )
    change_datetime: datetime = Field(
        ..., description="Timestamp (date and time, ISO 8601) of an event or change"
    )
    changed_by: str | None = Field(
        None,
        description="If manually (M): email address of the person who triggered an event; if automatically (A) name of method, function and/or process.",
    )
    data_change_type: DataChangeType | None = Field(
        None,
        description="Data change type: Updated value (UPD), created new unit/row (NEW), or deleted unit/row (DEL)",
    )
    old_value: str | list[OldValueItem] | dict[str, Any] | None = Field(
        None, description="Old value(s)"
    )
    new_value: str | list[NewValueItem] | dict[str, Any] | None = Field(
        None, description="New value(s)"
    )
    change_comment: str | None = Field(None, description="Change comment")
    data_version: str | None = Field(
        None, description="Dataset version if applicable, eg. 1, 2 or 3"
    )
